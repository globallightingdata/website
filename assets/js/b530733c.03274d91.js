"use strict";(self.webpackChunkgldf=self.webpackChunkgldf||[]).push([[1014],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>g});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var d=r.createContext({}),s=function(e){var t=r.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=s(e.components);return r.createElement(d.Provider,{value:t},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,d=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=s(a),u=n,g=m["".concat(d,".").concat(u)]||m[u]||f[u]||i;return a?r.createElement(g,l(l({ref:t},c),{},{components:a})):r.createElement(g,l({ref:t},c))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[m]="string"==typeof e?e:n,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},927:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>f,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var r=a(7462),n=(a(7294),a(3905));const i={title:"GLDF .NET Parser",sidebar_label:"GLDF .NET Parser"},l=void 0,o={unversionedId:"tools-dev/gldf-net-parser",id:"tools-dev/gldf-net-parser",title:"GLDF .NET Parser",description:"GLDF .NET library",source:"@site/docs/tools-dev/gldf-net-parser.md",sourceDirName:"tools-dev",slug:"/tools-dev/gldf-net-parser",permalink:"/docs/tools-dev/gldf-net-parser",draft:!1,editUrl:"https://github.com/globallightingdata/website/tree/master/docs/tools-dev/gldf-net-parser.md",tags:[],version:"current",frontMatter:{title:"GLDF .NET Parser",sidebar_label:"GLDF .NET Parser"},sidebar:"sidebar",previous:{title:"GLDF Checksum Service",permalink:"/docs/tools-dev/gldf-checksum-service"},next:{title:"L3D .NET Parser",permalink:"/docs/tools-dev/l3d-net-parser"}},d={},s=[{value:"GLDF .NET library",id:"gldf-net-library",level:2},{value:"Introduction",id:"introduction",level:2},{value:"How to get started",id:"how-to-get-started",level:2},{value:"Requirements",id:"requirements",level:3},{value:"Nuget package",id:"nuget-package",level:3},{value:"XML Serialization",id:"xml-serialization",level:3},{value:"Serialize GLDF domain DTOs to XML string",id:"serialize-gldf-domain-dtos-to-xml-string",level:4},{value:"Serialize GLDF domain DTOs to .xml file",id:"serialize-gldf-domain-dtos-to-xml-file",level:4},{value:"Deserialize GLDF XML string to domain DTOs",id:"deserialize-gldf-xml-string-to-domain-dtos",level:4},{value:"Deserialize GLDF .xml file to domain DTOs",id:"deserialize-gldf-xml-file-to-domain-dtos",level:4},{value:"Set custom XML Serializer settings",id:"set-custom-xml-serializer-settings",level:4},{value:"XML validation",id:"xml-validation",level:3},{value:"Validate XML string with GLDF XmlSchema",id:"validate-xml-string-with-gldf-xmlschema",level:4},{value:"Validate a .xml file with GLDF XmlSchema",id:"validate-a-xml-file-with-gldf-xmlschema",level:4},{value:"Set Encoding (only required when validating .xml files)",id:"set-encoding-only-required-when-validating-xml-files",level:4},{value:"Container read/write",id:"container-readwrite",level:3},{value:"Write a .gldf container file",id:"write-a-gldf-container-file",level:4},{value:"Read a .gldf container file",id:"read-a-gldf-container-file",level:4},{value:"Extract a .gldf container content to a directory",id:"extract-a-gldf-container-content-to-a-directory",level:4},{value:"Create a .gldf container from content in a directory",id:"create-a-gldf-container-from-content-in-a-directory",level:4},{value:"Container Validation",id:"container-validation",level:3},{value:"Validate a <code>GldfContainer</code> DTO",id:"validate-a-gldfcontainer-dto",level:4},{value:"Validate a .gldf container file",id:"validate-a-gldf-container-file",level:4},{value:"Interfaces",id:"interfaces",level:3}],c={toc:s},m="wrapper";function f(e){let{components:t,...a}=e;return(0,n.kt)(m,(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"gldf-net-library"},"GLDF .NET library"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://github.com/globallightingdata/gldf.net"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/badge/Github-Repository-lightgrey",alt:"Github"}))," ",(0,n.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/GLDF.Net/"},(0,n.kt)("img",{parentName:"a",src:"https://img.shields.io/nuget/v/GLDF.Net.svg",alt:"NuGet Status"}))," ",(0,n.kt)("a",{parentName:"p",href:"https://www.fuget.org/packages/GLDF.Net"},(0,n.kt)("img",{parentName:"a",src:"https://www.fuget.org/packages/GLDF.Net/badge.svg",alt:"GLDF.Net on fuget.org"}))),(0,n.kt)("h2",{id:"introduction"},"Introduction"),(0,n.kt)("p",null,"GLDF.NET ist a Microsoft .NET library for the GLDF"),(0,n.kt)("p",null,"Features"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Serialize and deserialize ",(0,n.kt)("a",{parentName:"li",href:"/docs/structure/xml-hierarchy"},"GLDF XML")),(0,n.kt)("li",{parentName:"ul"},"100% format coverage of ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/globallightingdata/gldf/releases"},"version 1.0.0")),(0,n.kt)("li",{parentName:"ul"},"Validate ",(0,n.kt)("a",{parentName:"li",href:"/docs/structure/xml-hierarchy"},"GLDF XML")," with the GLDF XML Schema (",(0,n.kt)("a",{parentName:"li",href:"pathname:///xsd-reference/index_Root.html"},"XSD"),")"),(0,n.kt)("li",{parentName:"ul"},"Read and write .gldf ",(0,n.kt)("a",{parentName:"li",href:"/docs/container/about-container"},"container files"),", including all assets and signature file"),(0,n.kt)("li",{parentName:"ul"},"Validate .gldf ",(0,n.kt)("a",{parentName:"li",href:"/docs/container/about-container"},"container files")),(0,n.kt)("li",{parentName:"ul"},"No dependencies, small footprint (~400kb)"),(0,n.kt)("li",{parentName:"ul"},"Windows & Unix compatible")),(0,n.kt)("h2",{id:"how-to-get-started"},"How to get started"),(0,n.kt)("h3",{id:"requirements"},"Requirements"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://dotnet.microsoft.com/download"},".NET 6+")," compatible project")),(0,n.kt)("h3",{id:"nuget-package"},"Nuget package"),(0,n.kt)("p",null,"Add the package within your IDE or using the CLI"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet add package GLDF.Net\n")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"xml-serialization"},"XML Serialization"),(0,n.kt)("h4",{id:"serialize-gldf-domain-dtos-to-xml-string"},"Serialize GLDF domain DTOs to XML string"),(0,n.kt)("p",null,"All models in the following examples are incomplete. For valid GLDF luminaires/sensors please read the documentation."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var serializer = new GldfXmlSerializer();\nvar root = new Root {Header = new Header {Author = "Github Example"}};\nvar xml = serializer.SerializeToString(root);\n')),(0,n.kt)("h4",{id:"serialize-gldf-domain-dtos-to-xml-file"},"Serialize GLDF domain DTOs to .xml file"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var serializer = new GldfXmlSerializer();\nvar root = new Root {Header = new Header {Author = "Github Example"}};\nserializer.SerializeToFile(root, @"c:\\some\\file\\path\\luminaire.xml");\n')),(0,n.kt)("h4",{id:"deserialize-gldf-xml-string-to-domain-dtos"},"Deserialize GLDF XML string to domain DTOs"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var serializer = new GldfXmlSerializer();\nvar xml = @"<Root><Header><Author>Github Example</Author></Header></Root>";\nRoot root = serializer.DeserializeFromString(xml);\n')),(0,n.kt)("h4",{id:"deserialize-gldf-xml-file-to-domain-dtos"},"Deserialize GLDF .xml file to domain DTOs"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var serializer = new GldfXmlSerializer();\nvar filePath = @"c:\\some\\file\\path\\luminaire.xml";\nRoot root = serializer.DeserializeFromFile(filePath);\n')),(0,n.kt)("h4",{id:"set-custom-xml-serializer-settings"},"Set custom XML Serializer settings"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"XmlWriterSettings settings = new XmlWriterSettings();\nsettings.Encoding = Encoding.UTF32; // UTF-8 by default\nsettings.Indent = false; // true by default\n// ...more settings\nvar serializer = new GldfXmlSerializer(settings);\n")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"xml-validation"},"XML validation"),(0,n.kt)("h4",{id:"validate-xml-string-with-gldf-xmlschema"},"Validate XML string with GLDF XmlSchema"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var gldfXmlValidator = new GldfXmlValidator();\nvar xml = @"<Root><Header><Author>Github Example</Author></Header></Root>";\nIEnumerable<ValidationHint> validationResult = gldfXmlValidator.ValidateString(xml);\n\nforeach (var validationHint in validationResult)\n{\n    Console.Write(validationHint.Severity); // Error/Info/Warning\n    Console.Write(validationHint.ErrorType); // For XML validation its always XmlSchema\n    Console.Write(validationHint.Message); // E.g. missing XML Elements etc.\n    Console.Write(Environment.NewLine);\n}\n')),(0,n.kt)("h4",{id:"validate-a-xml-file-with-gldf-xmlschema"},"Validate a .xml file with GLDF XmlSchema"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var gldfXmlValidator = new GldfXmlValidator();\nvar filePath = @"c:\\some\\file\\path\\luminaire.xml";\nIEnumerable<ValidationHint> validationResult = gldfXmlValidator.ValidateFile(filePath);\n\nforeach (var validationHint in validationResult)\n{\n    Console.Write(validationHint.Severity); // Error/Info/Warning\n    Console.Write(validationHint.ErrorType); // For XML validation its always XmlSchema\n    Console.Write(validationHint.Message); // E.g. missing XML Elements etc.\n    Console.Write(Environment.NewLine);\n}\n')),(0,n.kt)("h4",{id:"set-encoding-only-required-when-validating-xml-files"},"Set Encoding (only required when validating .xml files)"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var encoding = Encoding.UTF32;\nvar gldfXmlValidator = new GldfXmlValidator(encoding);\nvar filePath = @"c:\\some\\file\\path\\luminaire.xml";\ngldfXmlValidator.ValidateFile(filePath);\n')),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"container-readwrite"},"Container read/write"),(0,n.kt)("h4",{id:"write-a-gldf-container-file"},"Write a .gldf container file"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var containerWriter = new GldfContainerWriter();\nvar gldfArchive = new GldfContainer\n{\n    Product = new Root {Header = new Header {Author = "Github example"}},\n    Assets = new GldfAssets(),\n    Signature = "some checksum"\n};\nvar filePath = @"c:\\some\\file\\path\\luminaire.gldf";\ncontainerWriter.WriteToFile(filePath, gldfArchive);\n')),(0,n.kt)("h4",{id:"read-a-gldf-container-file"},"Read a .gldf container file"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var containerReader = new GldfContainerReader();\nvar filePath = @"c:\\some\\file\\path\\luminaire.gldf";\nGldfContainer container = containerReader.ReadFromFile(filePath);\nConsole.WriteLine($"Luminaire author: {container.Product.Header.Author}");\n')),(0,n.kt)("h4",{id:"extract-a-gldf-container-content-to-a-directory"},"Extract a .gldf container content to a directory"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var containerReader = new GldfContainerReader();\nvar sourceFilePath = @"c:\\some\\file\\path\\luminaire.gldf";\nvar targetFolder = @"c:\\some\\file\\path\\extractedContent\\";\ncontainerReader.ExtractToDirectory(sourceFilePath, targetFolder);\n')),(0,n.kt)("h4",{id:"create-a-gldf-container-from-content-in-a-directory"},"Create a .gldf container from content in a directory"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var containerWriter = new GldfContainerWriter();\nvar sourceDirectory = @"c:\\some\\file\\path\\extractedContent\\";\nvar targetFile = @"c:\\some\\file\\path\\luminaire.gldf";\ncontainerWriter.CreateFromDirectory(sourceDirectory, targetFile);\n')),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"container-validation"},"Container Validation"),(0,n.kt)("h4",{id:"validate-a-gldfcontainer-dto"},"Validate a ",(0,n.kt)("inlineCode",{parentName:"h4"},"GldfContainer")," DTO"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var validator = new GldfContainerValidator();\nvar gldfContainer = new GldfContainer\n{\n    Product = new Root {Header = new Header {Author = "Github example"}},\n    Assets = new GldfAssets(),\n    Signature = "some checksum"\n};\nvar validationResult = validator.Validate(gldfContainer);\n\nforeach (var validationHint in validationResult)\n{\n    Console.Write(validationHint.Severity); // Enum: Error/Info/Warning\n    Console.Write(validationHint.ErrorType); // Enum: E.g. InvalidZipFile\n    Console.Write(validationHint.Message); // E.g. Not a valid ZIP file etc.\n    Console.Write(Environment.NewLine);\n}\n')),(0,n.kt)("h4",{id:"validate-a-gldf-container-file"},"Validate a .gldf container file"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},'var validator = new GldfContainerValidator();\nvar filePath = @"c:\\some\\file\\path\\luminaire.gldf";\nvar validationResult = validator.Validate(filePath);\n\nforeach (var validationHint in validationResult)\n{\n    Console.Write(validationHint.Severity); // Enum: Error/Info/Warning\n    Console.Write(validationHint.ErrorType); // Enum: E.g. InvalidZipFile\n    Console.Write(validationHint.Message); // E.g. Not a valid ZIP file etc.\n    Console.Write(Environment.NewLine);\n}\n')),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"interfaces"},"Interfaces"),(0,n.kt)("p",null,"There are also Interfaces you can use:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-csharp"},"// 1) Serialize XML\nIGldfXmlSerializer serializer = new GldfXmlSerializer();\n// 2) Validate XML\nIGldfXmlValidator xmlValidator = new GldfXmlValidator();\n\n// 3) Read GLDF container\nIGldfContainerReader containerReader = new GldfContainerReader();\n// 4) Write GLDF container\nIGldfContainerWriter containerWriter = new GldfContainerWriter();\n// 5) Validate GLDF Container\nIGldfContainerValidator containerValidator = new GldfContainerValidator();\n")))}f.isMDXComponent=!0}}]);