"use strict";(self.webpackChunkgldf=self.webpackChunkgldf||[]).push([[1014],{7731:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=n(5893),r=n(1151);const l={title:"GLDF .NET Parser",sidebar_label:"GLDF .NET Parser"},t=void 0,o={id:"tools-dev/gldf-net-parser",title:"GLDF .NET Parser",description:"GLDF .NET library",source:"@site/docs/tools-dev/gldf-net-parser.md",sourceDirName:"tools-dev",slug:"/tools-dev/gldf-net-parser",permalink:"/docs/tools-dev/gldf-net-parser",draft:!1,unlisted:!1,editUrl:"https://github.com/globallightingdata/website/tree/master/docs/tools-dev/gldf-net-parser.md",tags:[],version:"current",frontMatter:{title:"GLDF .NET Parser",sidebar_label:"GLDF .NET Parser"},sidebar:"sidebar",previous:{title:"L3D Editor",permalink:"/docs/tools-dev/l3d-editor"},next:{title:"L3D .NET Parser",permalink:"/docs/tools-dev/l3d-net-parser"}},d={},s=[{value:"GLDF .NET library",id:"gldf-net-library",level:2},{value:"Introduction",id:"introduction",level:2},{value:"How to get started",id:"how-to-get-started",level:2},{value:"Requirements",id:"requirements",level:3},{value:"Nuget package",id:"nuget-package",level:3},{value:"XML Serialization",id:"xml-serialization",level:3},{value:"Serialize GLDF domain DTOs to XML string",id:"serialize-gldf-domain-dtos-to-xml-string",level:4},{value:"Serialize GLDF domain DTOs to .xml file",id:"serialize-gldf-domain-dtos-to-xml-file",level:4},{value:"Deserialize GLDF XML string to domain DTOs",id:"deserialize-gldf-xml-string-to-domain-dtos",level:4},{value:"Deserialize GLDF .xml file to domain DTOs",id:"deserialize-gldf-xml-file-to-domain-dtos",level:4},{value:"Set custom XML Serializer settings",id:"set-custom-xml-serializer-settings",level:4},{value:"XML validation",id:"xml-validation",level:3},{value:"Validate XML string with GLDF XmlSchema",id:"validate-xml-string-with-gldf-xmlschema",level:4},{value:"Validate a .xml file with GLDF XmlSchema",id:"validate-a-xml-file-with-gldf-xmlschema",level:4},{value:"Set Encoding (only required when validating .xml files)",id:"set-encoding-only-required-when-validating-xml-files",level:4},{value:"Container read/write",id:"container-readwrite",level:3},{value:"Write a .gldf container file",id:"write-a-gldf-container-file",level:4},{value:"Read a .gldf container file",id:"read-a-gldf-container-file",level:4},{value:"Extract a .gldf container content to a directory",id:"extract-a-gldf-container-content-to-a-directory",level:4},{value:"Create a .gldf container from content in a directory",id:"create-a-gldf-container-from-content-in-a-directory",level:4},{value:"Container Validation",id:"container-validation",level:3},{value:"Validate a <code>GldfContainer</code> DTO",id:"validate-a-gldfcontainer-dto",level:4},{value:"Validate a .gldf container file",id:"validate-a-gldf-container-file",level:4},{value:"Interfaces",id:"interfaces",level:3}];function c(e){const i={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.h2,{id:"gldf-net-library",children:"GLDF .NET library"}),"\n",(0,a.jsxs)(i.p,{children:[(0,a.jsx)(i.a,{href:"https://github.com/globallightingdata/gldf.net",children:(0,a.jsx)(i.img,{src:"https://img.shields.io/badge/Github-Repository-lightgrey",alt:"Github"})})," ",(0,a.jsx)(i.a,{href:"https://www.nuget.org/packages/GLDF.Net/",children:(0,a.jsx)(i.img,{src:"https://img.shields.io/nuget/v/GLDF.Net.svg",alt:"NuGet Status"})})," ",(0,a.jsx)(i.a,{href:"https://www.fuget.org/packages/GLDF.Net",children:(0,a.jsx)(i.img,{src:"https://www.fuget.org/packages/GLDF.Net/badge.svg",alt:"GLDF.Net on fuget.org"})})]}),"\n",(0,a.jsx)(i.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsx)(i.p,{children:"GLDF.NET ist a Microsoft .NET library for the GLDF"}),"\n",(0,a.jsx)(i.p,{children:"Features"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:["Serialize and deserialize ",(0,a.jsx)(i.a,{href:"/docs/structure/xml-hierarchy",children:"GLDF XML"})]}),"\n",(0,a.jsxs)(i.li,{children:["100% format coverage of ",(0,a.jsx)(i.a,{href:"https://github.com/globallightingdata/gldf/releases",children:"version 1.0.0"})]}),"\n",(0,a.jsxs)(i.li,{children:["Validate ",(0,a.jsx)(i.a,{href:"/docs/structure/xml-hierarchy",children:"GLDF XML"})," with the GLDF XML Schema (",(0,a.jsx)(i.a,{href:"pathname:///xsd-reference/index_Root.html",children:"XSD"}),")"]}),"\n",(0,a.jsxs)(i.li,{children:["Read and write .gldf ",(0,a.jsx)(i.a,{href:"/docs/container/about-container",children:"container files"}),", including all assets and signature file"]}),"\n",(0,a.jsxs)(i.li,{children:["Validate .gldf ",(0,a.jsx)(i.a,{href:"/docs/container/about-container",children:"container files"})]}),"\n",(0,a.jsx)(i.li,{children:"No dependencies, small footprint (~400kb)"}),"\n",(0,a.jsx)(i.li,{children:"Windows & Unix compatible"}),"\n"]}),"\n",(0,a.jsx)(i.h2,{id:"how-to-get-started",children:"How to get started"}),"\n",(0,a.jsx)(i.h3,{id:"requirements",children:"Requirements"}),"\n",(0,a.jsxs)(i.ul,{children:["\n",(0,a.jsxs)(i.li,{children:[(0,a.jsx)(i.a,{href:"https://dotnet.microsoft.com/download",children:".NET 6+"})," compatible project"]}),"\n"]}),"\n",(0,a.jsx)(i.h3,{id:"nuget-package",children:"Nuget package"}),"\n",(0,a.jsx)(i.p,{children:"Add the package within your IDE or using the CLI"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-bash",children:"dotnet add package GLDF.Net\n"})}),"\n",(0,a.jsx)(i.hr,{}),"\n",(0,a.jsx)(i.h3,{id:"xml-serialization",children:"XML Serialization"}),"\n",(0,a.jsx)(i.h4,{id:"serialize-gldf-domain-dtos-to-xml-string",children:"Serialize GLDF domain DTOs to XML string"}),"\n",(0,a.jsx)(i.p,{children:"All models in the following examples are incomplete. For valid GLDF luminaires/sensors please read the documentation."}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-csharp",children:'var serializer = new GldfXmlSerializer();\nvar root = new Root {Header = new Header {Author = "Github Example"}};\nvar xml = serializer.SerializeToString(root);\n'})}),"\n",(0,a.jsx)(i.h4,{id:"serialize-gldf-domain-dtos-to-xml-file",children:"Serialize GLDF domain DTOs to .xml file"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-csharp",children:'var serializer = new GldfXmlSerializer();\nvar root = new Root {Header = new Header {Author = "Github Example"}};\nserializer.SerializeToFile(root, @"c:\\some\\file\\path\\luminaire.xml");\n'})}),"\n",(0,a.jsx)(i.h4,{id:"deserialize-gldf-xml-string-to-domain-dtos",children:"Deserialize GLDF XML string to domain DTOs"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-csharp",children:'var serializer = new GldfXmlSerializer();\nvar xml = @"<Root><Header><Author>Github Example</Author></Header></Root>";\nRoot root = serializer.DeserializeFromString(xml);\n'})}),"\n",(0,a.jsx)(i.h4,{id:"deserialize-gldf-xml-file-to-domain-dtos",children:"Deserialize GLDF .xml file to domain DTOs"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-csharp",children:'var serializer = new GldfXmlSerializer();\nvar filePath = @"c:\\some\\file\\path\\luminaire.xml";\nRoot root = serializer.DeserializeFromFile(filePath);\n'})}),"\n",(0,a.jsx)(i.h4,{id:"set-custom-xml-serializer-settings",children:"Set custom XML Serializer settings"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-csharp",children:"XmlWriterSettings settings = new XmlWriterSettings();\nsettings.Encoding = Encoding.UTF32; // UTF-8 by default\nsettings.Indent = false; // true by default\n// ...more settings\nvar serializer = new GldfXmlSerializer(settings);\n"})}),"\n",(0,a.jsx)(i.hr,{}),"\n",(0,a.jsx)(i.h3,{id:"xml-validation",children:"XML validation"}),"\n",(0,a.jsx)(i.h4,{id:"validate-xml-string-with-gldf-xmlschema",children:"Validate XML string with GLDF XmlSchema"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-csharp",children:'var gldfXmlValidator = new GldfXmlValidator();\nvar xml = @"<Root><Header><Author>Github Example</Author></Header></Root>";\nIEnumerable<ValidationHint> validationResult = gldfXmlValidator.ValidateString(xml);\n\nforeach (var validationHint in validationResult)\n{\n    Console.Write(validationHint.Severity); // Error/Info/Warning\n    Console.Write(validationHint.ErrorType); // For XML validation its always XmlSchema\n    Console.Write(validationHint.Message); // E.g. missing XML Elements etc.\n    Console.Write(Environment.NewLine);\n}\n'})}),"\n",(0,a.jsx)(i.h4,{id:"validate-a-xml-file-with-gldf-xmlschema",children:"Validate a .xml file with GLDF XmlSchema"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-csharp",children:'var gldfXmlValidator = new GldfXmlValidator();\nvar filePath = @"c:\\some\\file\\path\\luminaire.xml";\nIEnumerable<ValidationHint> validationResult = gldfXmlValidator.ValidateFile(filePath);\n\nforeach (var validationHint in validationResult)\n{\n    Console.Write(validationHint.Severity); // Error/Info/Warning\n    Console.Write(validationHint.ErrorType); // For XML validation its always XmlSchema\n    Console.Write(validationHint.Message); // E.g. missing XML Elements etc.\n    Console.Write(Environment.NewLine);\n}\n'})}),"\n",(0,a.jsx)(i.h4,{id:"set-encoding-only-required-when-validating-xml-files",children:"Set Encoding (only required when validating .xml files)"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-csharp",children:'var encoding = Encoding.UTF32;\nvar gldfXmlValidator = new GldfXmlValidator(encoding);\nvar filePath = @"c:\\some\\file\\path\\luminaire.xml";\ngldfXmlValidator.ValidateFile(filePath);\n'})}),"\n",(0,a.jsx)(i.hr,{}),"\n",(0,a.jsx)(i.h3,{id:"container-readwrite",children:"Container read/write"}),"\n",(0,a.jsx)(i.h4,{id:"write-a-gldf-container-file",children:"Write a .gldf container file"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-csharp",children:'var containerWriter = new GldfContainerWriter();\nvar gldfArchive = new GldfContainer\n{\n    Product = new Root {Header = new Header {Author = "Github example"}},\n    Assets = new GldfAssets(),\n    Signature = "some checksum"\n};\nvar filePath = @"c:\\some\\file\\path\\luminaire.gldf";\ncontainerWriter.WriteToFile(filePath, gldfArchive);\n'})}),"\n",(0,a.jsx)(i.h4,{id:"read-a-gldf-container-file",children:"Read a .gldf container file"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-csharp",children:'var containerReader = new GldfContainerReader();\nvar filePath = @"c:\\some\\file\\path\\luminaire.gldf";\nGldfContainer container = containerReader.ReadFromFile(filePath);\nConsole.WriteLine($"Luminaire author: {container.Product.Header.Author}");\n'})}),"\n",(0,a.jsx)(i.h4,{id:"extract-a-gldf-container-content-to-a-directory",children:"Extract a .gldf container content to a directory"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-csharp",children:'var containerReader = new GldfContainerReader();\nvar sourceFilePath = @"c:\\some\\file\\path\\luminaire.gldf";\nvar targetFolder = @"c:\\some\\file\\path\\extractedContent\\";\ncontainerReader.ExtractToDirectory(sourceFilePath, targetFolder);\n'})}),"\n",(0,a.jsx)(i.h4,{id:"create-a-gldf-container-from-content-in-a-directory",children:"Create a .gldf container from content in a directory"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-csharp",children:'var containerWriter = new GldfContainerWriter();\nvar sourceDirectory = @"c:\\some\\file\\path\\extractedContent\\";\nvar targetFile = @"c:\\some\\file\\path\\luminaire.gldf";\ncontainerWriter.CreateFromDirectory(sourceDirectory, targetFile);\n'})}),"\n",(0,a.jsx)(i.hr,{}),"\n",(0,a.jsx)(i.h3,{id:"container-validation",children:"Container Validation"}),"\n",(0,a.jsxs)(i.h4,{id:"validate-a-gldfcontainer-dto",children:["Validate a ",(0,a.jsx)(i.code,{children:"GldfContainer"})," DTO"]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-csharp",children:'var validator = new GldfContainerValidator();\nvar gldfContainer = new GldfContainer\n{\n    Product = new Root {Header = new Header {Author = "Github example"}},\n    Assets = new GldfAssets(),\n    Signature = "some checksum"\n};\nvar validationResult = validator.Validate(gldfContainer);\n\nforeach (var validationHint in validationResult)\n{\n    Console.Write(validationHint.Severity); // Enum: Error/Info/Warning\n    Console.Write(validationHint.ErrorType); // Enum: E.g. InvalidZipFile\n    Console.Write(validationHint.Message); // E.g. Not a valid ZIP file etc.\n    Console.Write(Environment.NewLine);\n}\n'})}),"\n",(0,a.jsx)(i.h4,{id:"validate-a-gldf-container-file",children:"Validate a .gldf container file"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-csharp",children:'var validator = new GldfContainerValidator();\nvar filePath = @"c:\\some\\file\\path\\luminaire.gldf";\nvar validationResult = validator.Validate(filePath);\n\nforeach (var validationHint in validationResult)\n{\n    Console.Write(validationHint.Severity); // Enum: Error/Info/Warning\n    Console.Write(validationHint.ErrorType); // Enum: E.g. InvalidZipFile\n    Console.Write(validationHint.Message); // E.g. Not a valid ZIP file etc.\n    Console.Write(Environment.NewLine);\n}\n'})}),"\n",(0,a.jsx)(i.hr,{}),"\n",(0,a.jsx)(i.h3,{id:"interfaces",children:"Interfaces"}),"\n",(0,a.jsx)(i.p,{children:"There are also Interfaces you can use:"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-csharp",children:"// 1) Serialize XML\nIGldfXmlSerializer serializer = new GldfXmlSerializer();\n// 2) Validate XML\nIGldfXmlValidator xmlValidator = new GldfXmlValidator();\n\n// 3) Read GLDF container\nIGldfContainerReader containerReader = new GldfContainerReader();\n// 4) Write GLDF container\nIGldfContainerWriter containerWriter = new GldfContainerWriter();\n// 5) Validate GLDF Container\nIGldfContainerValidator containerValidator = new GldfContainerValidator();\n"})})]})}function h(e={}){const{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},1151:(e,i,n)=>{n.d(i,{Z:()=>o,a:()=>t});var a=n(7294);const r={},l=a.createContext(r);function t(e){const i=a.useContext(l);return a.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),a.createElement(l.Provider,{value:i},e.children)}}}]);